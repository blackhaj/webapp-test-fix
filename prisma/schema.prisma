generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Link {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  url         String   @db.VarChar(255)

  metaTitle       String? @db.Text
  metaDescription String? @db.Text
  metaImage       String? @db.Text
  metaType        String? @db.Text

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  tags        Tag[]

  @@unique([userId, url])
}

model Tag {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  name      String    @db.VarChar(255)

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  links     Link[]

  @@unique([userId, name])
}

model SecretKey {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  hash      String   @db.VarChar(255) @unique
  firstFive String   @db.VarChar(255)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model BookDetails {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  title     String
  asin      String @unique
  author    String
  imageUrl  String

  books     Book[]
}

model Book {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  purchaseDate DateTime?
  wishlistDate DateTime?
  status       BookStatus

  book         BookDetails     @relation(fields: [asin], references: [asin], onDelete: Cascade)
  asin         String

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

}

enum BookStatus {
  FINISHED
  DITCHED
  NOT_STARTED
  WISHLIST
}

model Account {
  id                 String  @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessionToken String   @unique
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  links         Link[]
  tags          Tag[]
  secretKeys    SecretKey[]
  books         Book[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}